{
  "if": {
    "prefix": "if",
    "body": [
      "if ($1) {",
      "\t${TM_SELECTED_TEXT}$0",
      "}\n"
    ],
    "description": "Inserts an if statement. Optionally wraps selected text in `if {}` block."
  },
  "else if": {
    "prefix": "else if",
    "body": [
      "else if ($1) {",
      "\t${TM_SELECTED_TEXT}$0",
      "}"
    ],
    "description": "Inserts an else if block. Optionally wraps selected text in `else if {}` block."
  },
  "else": {
    "prefix": "else",
    "body": [
      "else {",
      "\t${TM_SELECTED_TEXT}$0",
      "}\n"
    ],
    "description": "Inserts an else block. Optionally wraps selected text in `else {}` block."
  },
  "do": {
    "prefix": "do",
    "body": [
      "do {",
      "\t${TM_SELECTED_TEXT}$0",
      "} while (${1:0});\n"
    ],
    "description": "Inserts a do...while loop. Optionally wraps selected text in `do {} while ()`."
  },
  "while": {
    "prefix": "while",
    "body": [
      "while (${1:1}) {",
      "\t${TM_SELECTED_TEXT}$0",
      "}\n"
    ],
    "description": "Inserts a while loop. Optionally wraps selected text in `while () {}`."
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (${1|int,size_t|} ${2} = ${3:0}; ${2} ${3:|<,>,<=,>=,==,!=|} ${4:length}; ${5:++,--}${2}) {",
      "\t${TM_SELECTED_TEXT}$0",
      "}\n"
    ],
    "description": "Inserts a for loop. Configures loop variable, condition, and increment. Wrapables."
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch ($1:${TM_SELECTED_TEXT}) {",
      "case $4:",
      "\t$0",
      "\tbreak;",
      "\n",
      "\n",
      "default:",
      "\t${2}${3:break}};",
      "}\n"
    ],
    "description": "Inserts a switch statement. Optionally uses selected text as expression."
  },
  "case": {
    "prefix": "case",
    "body": [
      "case $1:",
      "\t${TM_SELECTED_TEXT}$0",
      "\tbreak;"
    ],
    "description": "Inserts a case label and statement. Optionally wraps selected text."
  },
  "enum": {
    "prefix": "enum",
    "body": [
      "enum e${1:EnumID} {",
      "\t${2:e${1:EnumID}_None} = ${3:0},",
      "\t${4:e${1:EnumID}_Item},",
      "\t${5:k${1:EnumID}_Count}$0",
      "};\n"
    ],
    "description": "Inserts an enum with name, default value, items, and count value."
  },
  "struct": {
    "prefix": "struct",
    "body": [
      "struct ${1:StructID} {",
      "\t${2:int} ${3:structMember};",
      "\t${4:${TM_SELECTED_TEXT}}$0",
      "};\n"
    ],
    "description": "Inserts a struct with name, member variables. Optionally wrapables."
  },
  "func": {
    "prefix": "func",
    "body": [
      "${1:void} ${2:FuncID}(${3:int}, ${4:arg}) {",
      "\t${5:${TM_SELECTED_TEXT}}$0",
      "}\n"
    ],
    "description": "Inserts a function with return type, name, parameters, and body. Wrapables."
  },
  "typedef": {
    "prefix": "typedef",
    "body": [
      "typedef ${1:char} ${2:Byte};$0"
    ],
    "description": "Inserts a typedef to create an alias for a type."
  },
  "typedefenum": {
    "prefix": "typedefenum",
    "body": [
      "typedef enum e${1:EnumAlias} {",
      "\t${2:e${1:EnumAlias}_None} = ${3:0},",
      "\t${4:e${1:EnumAlias}_Item},",
      "\t${5:k${1:EnumAlias}_Count}$0",
      "} ${1:EnumAlias};\n"
    ],
    "description": "Inserts a typedef enum with name, default value, items, and count."
  },
  "typedefstruct": {
    "prefix": "typedefstruct",
    "body": [
      "typedef struct ${1:StructAlias} ${1:StructAlias};",
      "struct ${1:StructAlias} {",
      "\t${2:int} ${3:structMember};",
      "\t${4:${TM_SELECTED_TEXT}}$0",
      "};\n"
    ],
    "description": "Inserts a typedef struct with name, member variables. Optionally wrapables."
  },
  "typedeffunc": {
    "prefix": "typedeffuncptr",
    "body": [
      "typedef ${1:int} (*${2:FuncAlias})(${3:int}, ${4:int});$0"
    ],
    "description": "Inserts a typedef for a function pointer with return type and args."
  },
  "#extern": {
    "prefix": "#extern",
    "body": [
      "#if defined(__cplusplus)",
      "extern \"C\" {",
      "#endif // defined(__cplusplus)",
      "",
      "${TM_SELECTED_TEXT}$0",
      "",
      "#if defined(__cplusplus)",
      "}",
      "#endif // defined(__cplusplus)\n"
    ],
    "description": "Wraps code with extern \"C\" for C++ compatibility when linking with C code."
  },
  "#guard": {
    "prefix": "#guard",
    "body": [
      "#ifndef ${1:${TM_FILENAME}}",
      "#define ${1:${TM_FILENAME}}",
      "",
      "${TM_SELECTED_TEXT}$0",
      "",
      "#endif // !${1:${TM_FILENAME}}"
    ],
    "description": "Wraps code with an include guard based on the current file name."
  },
  "#unused": {
    "prefix": "#unused",
    "body": [
      "#ifdef UNUSED_CODE",
      "${TM_SELECTED_TEXT}$0",
      "#endif // $UNUSED_CODE"
    ],
    "description": "Wraps code in an #ifdef UNUSED_CODE block to enable/disable code."
  },
  "#ifdef": {
    "prefix": "#ifdef",
    "body": [
      "#ifdef $1",
      "${TM_SELECTED_TEXT}$0",
      "#endif // $1"
    ],
    "description": "Wraps code in an #ifdef block with a user-specified condition."
  },
  "#ifndef": {
    "prefix": "#ifndef",
    "body": [
      "#ifndef $1",
      "${TM_SELECTED_TEXT}$0",
      "#endif // !$1\n"
    ],
    "description": "Wraps code in an #ifndef block with a user-specified condition."
  },
  "#ifdefined": {
    "prefix": "#ifdefined",
    "body": [
      "#if defined($1)",
      "${TM_SELECTED_TEXT}$0",
      "#endif // defined($1)"
    ],
    "description": "Wraps code in an #if defined() block with a user-specified condition."
  },
  "#ifndefined": {
    "prefix": "#ifndefined",
    "body": [
      "#if !defined($1)",
      "${TM_SELECTED_TEXT}$0",
      "#endif // !defined($1)\n"
    ],
    "description": "Wraps code in an #if !defined() block with a user-specified condition."
  },
  "#if": {
    "prefix": "#if",
    "body": [
      "#if $1",
      "${TM_SELECTED_TEXT}$0",
      "#endif // $1"
    ],
    "description": "Wraps code in an #if block with a user-specified condition."
  },
  "#ifn": {
    "prefix": "#ifn",
    "body": [
      "#if !$1",
      "${TM_SELECTED_TEXT}$0",
      "#endif // !$1\n"
    ],
    "description": "Wraps code in an #if block with a negated user-specified condition."
  },
  "#inc<": {
    "prefix": "#inc<",
    "body": [
      "#include <${1:${TM_SELECTED_TEXT}}$0>"
    ],
    "description": "Inserts an #include statement for a system header file."
  },
  "#inc\"": {
    "prefix": "#inc\"",
    "body": [
      "#include \"${1:${TM_SELECTED_TEXT}}$0\""
    ],
    "description": "Inserts an #include statement for a user header file."
  },
  "#def": {
    "prefix": "#def",
    "body": [
      "#define $1 $2",
      "$0"
    ],
    "description": "Defines a preprocessor macro with an optional value."
  },
  "//cfoff": {
    "prefix": "//cfoff",
    "body": [
      "// clang-format off",
      "${TM_SELECTED_TEXT}$0",
      "// clang-format on"
    ],
    "description": "Wraps selected code in // clang-format off/on comments to disable formatting."
  },
  "//nolt": {
    "prefix": "//nolt",
    "body": [
      "// NOLINT${1:(${2:check-name})$0"
    ],
    "description": "Adds // NOLINT comment to suppress lint warnings on the current line."
  },
  "//noltn": {
    "prefix": "//noltn",
    "body": [
      "// NOLINTNEXTLINE${1:(${2:check-name})$0"
    ],
    "description": "Adds // NOLINTNEXTLINE comment to suppress lint warnings on the next line."
  },
  "//noltr": {
    "prefix": "//noltr",
    "body": [
      "// NOLINTBEGIN${1:(${2:check-name})}",
      "${TM_SELECTED_TEXT}$0",
      "// NOLINTEND${1:(${2:check-name})}"
    ],
    "description": "Wraps selected code in // NOLINTBEGIN/END comments to suppress lint warnings."
  },
  "#region": {
    "prefix": "#region",
    "body": [
      "// #region $1",
      "${TM_SELECTED_TEXT}$0",
      "// #endregion // $1\n"
    ],
    "description": "Wraps selected code in // #region comments for code folding and organization."
  },
  "//cmtbox": {
    "prefix": "//cmtbox",
    "body": [
      "/*********************************",
      " * ${TM_SELECTED_TEXT}$1",
      " *********************************/",
      "$0"
    ],
    "description": "Wraps selected text in a /* ... */ comment box for emphasis."
  },
  "//cmtsep*": {
    "prefix": "//cmtsep*",
    "body": [
      "/******** ${TM_SELECTED_TEXT}$1 ********/$0"
    ],
    "description": "Creates a /*** ... ***/ comment separator line with selected text."
  },
  "//cmtsep-": {
    "prefix": "//cmtsep-",
    "body": [
      "/*------- ${TM_SELECTED_TEXT}$1 -------*/$0"
    ],
    "description": "Creates a /*-- ... --*/ comment separator line with selected text."
  },
  "//sep*": {
    "prefix": "//sep*",
    "body": [
      "/*********************************/$0"
    ],
    "description": "Inserts a /******/ comment separator line."
  },
  "//sep-": {
    "prefix": "//sep-",
    "body": [
      "/*-------------------------------*/$0"
    ],
    "description": "Inserts a /*----*/ comment separator line."
  },
  "#section": {
    "prefix": "#section",
    "body": [
      "/******** $1 ********/",
      "// #region $2",
      "",
      "${TM_SELECTED_TEXT}",
      "$0",
      "// #endregion // $2",
      "/*------- $1 -------*/\n"
    ],
    "description": "Wraps /.../ cmtsep line and #region around selected text with labels."
  },
  "#headeronly": {
    "prefix": "#headeronly",
    "body": [
      "/*********************************",
      " * $1",
      " *********************************/",
      "// #region $2",
      "",
      "${TM_SELECTED_TEXT}",
      "$0",
      "// #endregion // $2",
      "/*-------------------------------*/\n"
    ],
    "description": "Wraps /.../ cmtbox and #region around selected text with label."
  },
  "//heading": {
    "prefix": "//heading",
    "body": [
      "/**",
      " * @file ${TM_FILENAME}",
      " * @author ${1:FirstName} ${2:LastName}${3:(${4:NickName})} (${5:email.address@example.com})",
      " *",
      " * @brief $6",
      " * @details $7",
      " *",
      " * @version ${8:0.1}",
      " * @date ${9:${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}}",
      " *",
      " * @copyright ${10:'$'cprt|licn}",
      " */\n"
    ],
    "description": "Inserts a C-style doxygen /** ... */ comment block with file info."
  },
  "#header": {
    "prefix": "#header",
    "body": [
      "/**",
      " * @file ${TM_FILENAME}",
      " * @author ${1:FirstName} ${2:LastName}${3:(${4:NickName})} (${5:email.address@example.com})",
      " *",
      " * @brief $6",
      " * @details $7",
      " *",
      " * @version ${8:0.1}",
      " * @date ${9:${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}}",
      " *",
      " * @copyright ${10:'$'cprt|licn}",
      " */",
      "",
      "",
      "#ifndef ${11:${TM_FILENAME}}",
      "#define ${11:${TM_FILENAME}}",
      "",
      "#if defined(__cplusplus)",
      "extern \"C\" {",
      "#endif // defined(__cplusplus)",
      "",
      "$0",
      "// #region Header_File_Inclusions",
      "${12:// when NEEDED instead of Forward_Declarations}",
      "// #endregion // Header_File_Inclusions",
      "",
      "// #region Pre-Processor_Definitions",
      "$9",
      "// #endregion // Pre-Processor_Definitions",
      "",
      "// #region Forward_Declarations",
      "${13:// when NEEDED in this header file}",
      "// #endregion // Forward_Declarations",
      "",
      "",
      "// #region Public_Types",
      "${14:// definitions: const, enum, struct, ...}",
      "// #endregion // Public_Types",
      "",
      "// #region Public_Data",
      "${15:// declarations: global, extern, static with extern}",
      "// #endregion // Public_Data",
      "",
      "",
      "// #region Inline_Functions",
      "${16:// definitions}",
      "// #endregion // Inline_Functions",
      "",
      "// #region Public_Function_Prototypes",
      "${17:// declarations}",
      "// #endregion // Public_Function_Prototypes",
      "",
      "",
      "#ifdef defined(__cplusplus)",
      "}",
      "#endif // defined(__cplusplus)",
      "",
      "#endif // !${11:${TM_FILENAME}}\n"
    ],
    "description": "Creates a C header file template with common sections. Wraps /.../."
  },
  "#source": {
    "prefix": "#source",
    "body": [
      "/**",
      " * @file ${TM_FILENAME}",
      " * @author ${1:FirstName} ${2:LastName}${3:(${4:NickName})} (${5:email.address@example.com})",
      " *",
      " * @brief $6",
      " * @details $7",
      " *",
      " * @version ${8:0.1}",
      " * @date ${9:${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}}",
      " *",
      " * @copyright ${10:'$'cprt|licn}",
      " */",
      "",
      "$0",
      "// #region Header_File_Inclusions",
      "${11:// only those that are NECESSARY}",
      "// #endregion // Header_File_Inclusions",
      "",
      "// #region Pre-Processor_Definitions",
      "$12",
      "// #endregion // Pre-Processor_Definitions",
      "",
      "",
      "// #region Private_Types",
      "${13:// definitions: const, enum, struct, ...}",
      "// #endregion // Private_Types",
      "",
      "// #region Private_Data",
      "${14:// definitions}",
      "// #endregion // Private_Data",
      "",
      "// #region Private_Function_Prototypes",
      "${15:// declarations}",
      "// #endregion // Private_Function_Prototypes",
      "",
      "",
      "// #region Public_Data",
      "${16:// definitions}",
      "// #endregion // Public_Data",
      "",
      "// #region Public_Functions",
      "${17:// definitions}",
      "// #endregion // Public_Functions",
      "",
      "// #region Private_Functions",
      "${18:// definitions}",
      "// #endregion // Private_Functions"
    ],
    "description": "Creates a C source file template with common sections. Wraps /.../."
  }
}
